 APRENDIENDO A EJECUTAR ALGO VARIAS VECES CON BUCLES 

‚ú®C L A S E 21: APRENDIENDO BUCLES
Los bucles caso hipotetico de paso 1 -- paso a y paso b n veces -- paso 2
entrenamiento plan algoritmo de los primeros en el curso
planear
comemos 
entrenamos 
descansamos 
y este repetir n veces

# veces 1000
for num_potencia in range(1, 1001):
    po = num_potencia**2
    print(num_potencia)

#Imprimir todas la potencial de 2 hasta llegar al numero 1000

for num_potencia in range(1, 1001):
    po = num_potencia**2
    print(po)


# print(num_potencia)

‚ú®C L A S E 22: EL CICLO WHILE
tipos de bucles 
bucle while (mientras)
el problema de la clase 21 con while:
!!!
def run():
    LIMITE = 1000 # esta varible se llama constante lo opuesto a variable para eso tiene que ser escribo en mayusculas

    contador = 0 #variable que aumenta 
    potencia_2 = 2**contador
    while potencia_2 < LIMITE: #sintaxis a la estructura es exactamente a la de if
        print('2 elevado a ' + str(contador) + ' es igual a: ' + potencia_2)
        #bucle infinito un error la unica forma de cerrar es cerrar la consola
        contador = contador + 1
        potencia_2 = 2**contador

if __name__ == '__main__':
    run()
!!!


‚ú®C L A S E 23: Explorando un bucle diferente: el ciclo for
ciclo for -- 

#Imprimir de los numeros del 1 al 1000
'''
print(1)
print(2)
print(3)
print(4)
'''

contador = 1
print(contador)
while contador < 1000:
    contador = contador + 1
    print(contador)

    tip:
    contador = contador + 1 # aumentar una variable un determinado de veces esto es igual a :
    contador += 1

#resolver con ciclo for

for contandor in range(1000):
    print(contandor)

a = range(0, 1000)
print(a)
va de 0 a 1000
convertir de un rango a una lista
se imprimen del 0 al 999

for contandor in range(1000):
    print(contandor)
para el contador del 0 a 1000  hasta llegar al 999 pero hay que colocar 1001 para llegar a 1000
for contandor in range(1001):
    print(contandor)

    funcion range
for contandor in range(1, 1001):
    print(contandor)

    con el ciclo while usamos mas lineas que con el ciclo for 

#tabla del 11
for i in range(10):
    print(11*i)


‚ú®C L A S E 24: Recorriendo un string con for
Utilizamos for 
caso : recorrer una cadena de caracteres
recorrer : es tomar una estructura por cada parte unica dentro de un ciclo
caracter uno --- dos --- tres--- etc 

Cntrl + c parar la consola de python

def run():
    nombre = input('Escribe tu nombre: ')
    for letra in nombre:
        print(letra)


if __name__ == '__main__':
    run()

# letra arroja cada caracter de nombre por partes

‚ú®C L A S E 25:Interrumpiendo ciclos con break y continue
Como funcionan los ciclos 

dentro de python modificar el funcionamiento de un ciclo solo arrojar ciertas vueltas del ciclo
def run():
    '''
    for contador in range(1000):
        if contador % 2 != 0:#impirmir solo numeros pares-->
            continue
        print(contador)
    
    for i in range(10000):
        print(i)
        if i == 5678:
            break'''
    
    text = input('Escribe un texto: ')
    for letra in text:
        if letra == 'o':
            break
        print(letra)


if __name__ == '__main__':
    run()

#Reto 
Bienvenido al Cafe del Dicho ü§∑‚Äç‚ôÄÔ∏èüòâ
1 - Agua que no has de beber, ... d√©jala correr
        Lecci√≥n que aconseja no involucrarse con aquello que no se puede afrontar.        

2 - Botellita de jerez, ... todo lo que me digas ser√° al rev√©s
        Dicho usual entre los ni√±os para responder a los insultos, aunque en ocasiones suele ser empleado por la gente adulta.

3 - El flojo y el mezquino, ... recorren dos veces el mismo camino
        Aplica para situaciones en las que un perezoso, por no querer trabajar m√°s, repercuten en m√°s trabajo.


‚ú®C L A S E 26:
‚ú®C L A S E 27:
‚ú®C L A S E 28:
‚ú®C L A S E 29:
‚ú®C L A S E 30:
‚ú®C L A S E 31:
‚ú®C L A S E 32:
‚ú®C L A S E 33: