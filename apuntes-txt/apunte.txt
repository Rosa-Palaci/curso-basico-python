C L A S E 3:
Algoritmo ¿Qué es ?Es una serie de pasos para resolver un problema
- Finito (un inicio claro, y un fin, cierta cantidad de pasos para llegar al fin)
- No ambiguo (que un paso finalidad en particular)

C L A S E 4:
cmder instalcion consola de terminal

C L A S E 5 y 6: Intalacion de herramientas en sistemas opertivos como Mac y Ubuntu

C L A S E 7:
Comandos en window con cmdeer:
    cntrl + l -para limpiar la terminal-
    cd (change direction)  -para moverse entre carpetas-
        ejemplo: carpeta-ejemplo(en desktop) 
            carpeta-ejemplo(4 carpetas x0, x1, x2, x3)

            nosotros estamos en User/Documents/consola
            tenemos que movernos hacia atras 
    cd .. -llevame a la carpeta padre-
            para el ejemplo nuestra carpeta padre es Documents

        para ir a User otra vez cd ..

        con cd Desktop/
        despues vamos a cd carpeta-ejemplo/

        cd x0
        cd ..

    Saber que archivos hay dentro 
    ls (list) -vemos el contenido de la carpeta donde estamos parados-

    crear una carpeta en la consola
    mkdir (make directory)

    mkdir + "nombre de la carpeta"

    crear archivo 
    touch + "nombre de la archivo"

C L A S E 8:
operadores aritméticos(como una calculadora): 
    sumas, restas, multipliicación, divisiónes

    ¿Qué es la consola interactiva? nos permite ejecutar una linea de codigo inmediatamente
    Windoxs para iniciar la consola interactiva, py
    Mac o lunix python3
    >>> 5 + 5
    10
    permite ver el resultado para el codigo es
    print(5 + 5)
    10

    multiplicación 
    2 * 5 
    10

    2: 20
    error
    >>> 2 *20
    40
    >>> 5 * 4 * 3 * 2 * 1
    120
    >>> 21 / 5
    4.2

    division entero ucliriana
    >>> 21 // 5 
    4
    para ver el resto de la operacion 
    >>> 21 % 5
    1
    2 elevado a 2 potencias
    >>> 2 ** 2

    primeros los parentesis gerarquias de que hacer primero 
    y python las respeta

     Reto raiz acuadrada
     import math
    num = input("Poner un numero: ")
    raiz = math.sqrt(num)
     print(raiz)

C L A S E 9: ¿Qué es una variable?
Es como una caja, en la que puedes guardas algo, como zapatos, un objeto o varios, esta caja (variable)
tiene un identificar.

para salir de la consola de python con 
-exit()
para entrar 
py - en windows

crear variable

objetos
 numeros entreros
 *Consola*
     >>>numero = 3 (dentro de la variable numero voy a colocar 3)
     >>>print(numero)
     3
     >>> numero
     3
     >>> numero1 = 5
     >>> numero2 = 6
     >>> numero1
     5
     >>> numero2
     6
     >>> numero1 + numero2
     11
     cambiar contenido de una variable
     >>> numero1 = 12
     >>> numero1
     12
     >>> numero1 + numero2
     18
     >>> numero1 - numero2
     6

    guardar en numero-resultado la suma de numero1 + numero2
     >>> numero-resultado = numero1 + numero2
     >>> numero-resultado
     18 
     ¿Puede guardarme la operación en vez del producto final?

    serie de reglas para definir los identificadores 
        💥- El identificador no puede tener cualquier nombre en python
            -que empiece en numero 
            -las palabras deben estar en minusculas
            -si tenemos varias palabras separarlas con "-"

            Esto es diferente segun el programa
            El java cuadno tenemos varias palabras se separan con Mayúsculas excepto la primera palabra

C L A S E 10: 
Los primitivos: tipos de datos sencillos
tipos de datos = objetos

    4 tipos de datos clasicos:
    -numeros entreros
    -numeros de punto flotante
    -String Texto (cadenas de caracteres)
    -Booleanos (verdadero y falso) 

    **Consola de py**
    Todo lo que este entre "" o '' es texto

    Sumar strings concatenación(unir textos)
    >>> nombre + nombre2 
    'RosaFacundo'
    >>> nombre * 4
    'RosaRosaRosaRosa'
    >>> nombre + ", " + nombre2 concatenación(de forma estetica)
    'Rosa, Facundo'

    crear un num_decimal
    >>> num_decimal = 5.4
    >>> num_decimal
    5.4
    punto para decimales

    Booleanos (verdadero y falso)
    >>> es_estudiante = True
    es_estudiante
    True
    >>> print(es_estudiante)
    True
    >>> trabaja = False
    >>> trabaja
    False

Casos en los que queremos convertir un dato de un tipo a otro
por ejemplo: tenemos texto "1" pero no queremos tratar ese string como
string sino como numero entero

C L A S E 11: 
Convertir un dato a un tipo diferente

T I P: 
    >>> numero1 = input("Escribe un numero: ")
    >>> numero1
    '5'
    >>> numero2 = input("Escribe un numero: ")
    '12'
    >>> numero1 + numero2
    '512'
Se guardo como texto (al sumar textos se concatenan)
    Aqui ponemos int para transformar el contenido de mi variable a un numero entero 
    y eso lo guardo en mi variable numero1
    >>> numero1 = int(numero1)
    >>> numero1
    5
    >>> numero2 = int(numero2)
    >>> numero2
    12
    >>> numero1 + numero2
    17
    >>> numero_decimal = 2.3
    >>> int(2.3)
    2
    >>> numero_decimal
    2.3
    >>> str(numero_decimal)
    '2.3'

C L A S E 12: Operadores lógicos y de comparación

Caso: Estudiante que no trabaja
    **Consola**
    >>> es_estudiante = True
    >>> es_estudiante
    True
    >>> trabaja = False
    >>> trabaja
    False

Cuando decimos que es estudiante y trabaja es ¿True or False?
Respuesta False porque esta persona no trabaja aunque es estudiante
    >>> es_estudiante and trabaja
    False
    OPERADOR AND cuando yo utilizo este operador python regres un True cuando todas las variables den True
    >>> es_estudiante and trabaja
        (True)            (False)

    OPERADOR OR me regresará un True cuando todas al menos una de las variables sea True
    >>> es_estudiante or trabaja
    True

operadores lógicos
    OPERADOR NOT invierte el valor original de la variable
    >>> not es_estudiante
    False
    >>> not trabaja
    True

+Curso de pensamiento lógico+

operadores de comparación

    >>> numero1 = 4       
    >>> numero2 = 4               
    >>> numero1
    4
    >>> numero2
    4
    ¿Como saber que numero1 es igual a numero2?
    Con el operado ==

    >>> numero1 == numero2 (numero1 es igual a numero2)
    True

    >>> numero3 = 9
    >>> numero1 == numero3
    False

    operador != distinto 
    >>> numero1 != numero3 
    True
    >>> numero1 > numero3 (> mayor)
    False
    >>> numero1 < numero3 (< menor)
    True
    >>> numero1 >= numero3 (>= mayor o igual)
    False
    >>> numero1 >= numero2 (>= mayor o igual)
    True
    >>> numero1 <= numero2 (z= menor o igual)
    True
    >>> numero1 <= numero3 (<= menor o igual)
    True


C L A S E 13: Tu primer programa: conversor de monedas
Pesos colombianos a dolares

pesos = input("¿Cuántos pesos colombianos tiene?: ")
pesos = float(pesos)
valor_dolar = 3875
dolares = pesos / valor_dolar
💥dolares = round(dolares, 2) #Tomas el contenido dolares y solo toma dos decimales round es un parametro 2 es la cantidad de decimales y guardamos en nuestra variable
dolares = str(dolares)
print("Tienes $"+ dolares + "dólares" )

Reto personal: de Pesos a dolares.

C L A S E 14: Construyendo el camino de un programa con condicionales
edad = int(input("Escribe tu edad: "))
#edad = int(edad)

---
edad = int(input("Escribe tu edad: "))
if edad > 17:
    pass
else:
    pass
---
#Construyendo el camino de un programa con condicionales
edad = int(input("Escribe tu edad: "))
if edad > 17:
    print("Eres mayor de edad")
else:
    print("Eres menor de edad")
---
    print("Eres menor de edad")
'''
numero = int(input('Escribe un número: '))

if numero > 5:
    print('Es mayor a 5')
elif numero == 5:
    print('Es igual a 5')
else:
    print('Es menor a 5')
---

C O N D I C I O N A L E 
if - si 
else - si no NO
pass = palabra clave para dejar en blanco y escribir algo despues
elif - si no 


C L A S E 15: 
Varios países en mi conversor de monedas

cadena de caracteres de varia lineas
menu = """

"""
---
#Varios países en mi conversor de monedas
menu = """
Bienvenido al converso de monedas😎
1 - Pesos colombianos
2 - Pesos argentinos
3 - Pesos mexicanos

Elige una opción: 
"""
opcion = input(menu)

if opcion == '1':
    pesos = input("¿Cuántos pesos colombianos tienes?: ")
    pesos = float(pesos)
    valor_dolar = 3875
    dolares = pesos / valor_dolar
    dolares = round(dolares, 2)
    dolares = str(dolares)
    print("Tienes $"+ dolares + " dólares" )
elif opcion == '2':
    pesos = input("¿Cuántos pesos argentinos tienes?: ")
    pesos = float(pesos)
    valor_dolar = 65
    dolares = pesos / valor_dolar
    dolares = round(dolares, 2)
    dolares = str(dolares)
    print("Tienes $"+ dolares + " dólares" )
elif opcion == '3':
    pesos = input("¿Cuántos pesos mexicanos tienes?: ")
    pesos = float(pesos)
    valor_dolar = 20
    dolares = pesos / valor_dolar
    dolares = round(dolares, 2)
    dolares = str(dolares)
    print("Tienes $"+ dolares + " dólares" )
else:
    print('Ingresa una opción correcta por favor')
---

Aqui tenemos un mala practica porque
estamos repitiendo código
cambiamos pequeños valores de la logica para las tres opciones

C L A S E 16: Aprendiendo a no repetir código con funciones
pasos comunes en ves de paso1, paso2 etc.

invocar una funcion - voy a la definicion de def de la funcion
y ejecuto al logica que esta dentro de la funcion las def tambien se manejan 
con nombres como las variables 
escribir codigo puedo utilizar codigo para no repetir
***parametro:
def comversacion(***)
*** = parametros - que son simples variables que voy a tener disponibles para usar dentro de la funcion


---
def imprimir_mensaje():
    print('Mensaje especial: ')
    print('¡Estoy aprendiendo a usar funciones!')


imprimir_mensaje()
---

#Aprendiendo a no repetir código con funciones
def imprimir_mensaje():
    print('Mensaje especial: ')
    print('¡Estoy aprendiendo a usar funciones!')


imprimir_mensaje()
imprimir_mensaje()
imprimir_mensaje()
---
opcion = int(input('Elige una opción(1, 2, 3): '))
if opcion == 1:
    print('Hola')
    print('Cómo estás')
    print('Elegiste la opción 1')
    print('Adiós')
elif opcion == 2:
    print('Hola')
    print('Cómo estás')
    print('Elegiste la opción 1')
    print('Adiós') 
elif opcion == 3:
    print('Hola')
    print('Cómo estás')
    print('Elegiste la opción 1')
    print('Adiós') 
else:
    print('Escribe la opción correcta')
---



C L A S E 17: 
Modularizando nuestro conversor de monedas
Las funciones y para que sirven 
aplicar las funciones 
Muchas veces el resultado de un a funcion, lo que queremos es guardar el resultado de una funcion en una variable 

def suma (a, b):
    print('Se suma dos números')
    resultado = a + b
    return resultado

sumatoria = suma(1, 4)
print(sumatoria)

Crear las funciones por ensima del codigo para tener las definidas


C L A S E 18: Trabajando con texto: cadenas de caracteres

En python podemos hacer más que solo concatenar texto 
cadenas de caracteres
ejemplo: desarrollo de una app con un formulario de ingreso 
el nombre los escribe wen mininusculas y eso estaria mala
solucion de este Problema 
 
 Los métodos

 >>> nombre.upper() - es un metodo, funcion que especial para un tipo de dato en especial, colocar el texto en Mayusculas
'ROSA'
>>> nombre.capitalize() - nos arroga solo la primera letra de la variable que ligamos en Mayuscula
'Rosa'

Las funciones devuelven valores con la palabra return, pues ...
...estos metodos devuelven los valores pero no los guardan
para hacer eso de guardarlos es :
>>> nombre = nombre.capitalize() 
>>> nombre
'Rosa'

en el caso de tener espacios usando el metodo strip:
>>> nombre = nombre.strip() - lo que hace es eliminar los espcaios basura que pueden estar al principio o al final la cadena de caracteres
>>> nombre
'Rosa'
>>> nombre = nombre.lower()  - este metodo hace que convierta nuestra cadena de caracteres en minusculas
>>> nombre
'rosa'
>>> nombre = nombre.replace('a', 'e')  - este metodo intercambia valores por otros para eso ponemos entre parentesis el primer caracter que queremos cambiar luego coma despues el segundo caracter sera el que replazara al primero
>>> nombre
'rose'
con los indices podemos acceder a la cadena de caracteres
>>> nombre[0] - en programcion contamos desde 0            
'r'
para saber cuantos caracteres tiene la cadena 
>>> len(nombre)
4
>>> len(letra)
1
>>> len("Hola! Estoy en el video 18 del curso de python")
46

funciones buil it son funciones que podemos invocar porque ya estan por defecto en python 



C L A S E 19: Trabajando con texto: slices

Texto Platzi ejemplo pan 
partir a la mitad

1 rebanada: Pla
2 rebanada: tzi

consola:
>>> nombre = "Palaci"
>>> nombre
'Palaci'
>>> nombre[0]
'P' 
>>> nombre[1] 
'a'

subcadena de la cadena original
esto es un slice o rebanada
>>> nombre[0:3]
'Pal'
>>> nombre[:3]  
'Pal'
>>> nombre[3:] 
'aci'
>>> nombre[1:4]
'ala'
el 3 : es la cantidad de pasos que quiero hacer para llegar ahi
>>> nombre[1:4:2]
'aa'
voy a ir del indice inicial al indice final
>>> nombre[::]    
'Palaci'
>>> nombre[1::3]
'ac'
caso curioso:
ir del principio al final pero en pasos negativos inversos
Palacios pero al reves
>>> nombre[::-1] 
'icalaP'


C L A S E 20: Proyecto: palíndromo
Si una palabra es un palindromo o no 
un palindromo es una palabra que se lee igual al derecho y al reves puede ser palabra o frase

ejemplo:
 Luz azul
 Ana
 Yo hago yoga hoy

 Escribe una palabra: Luz azul
 Es palíndromo

 Escribe una palabra: Ana
 Es palíndromo

  Escribe una palabra: Diego
 No es palíndromo

 Primero: Crear una funcion principal run o main
        def main():
            pass
    El enterpoint el punto de entrada
    if __name__ == '__main__':
        pass
        una vez que python lee lo anterio empieza a correr todo lo que esta debajo 
        colocar esto es una buena practica
        lo que va ha pasar el lo sig. 
        if __name__ == '__main__':
            main()
            correr el archivo -- python se va a encontrar con if __name__ == '__main__':-- y va ha leer la invocación de la función principal pongase run() o main()
            y apartir de ahi se corre 




#Proyecto: palíndromo
def palindromo(palabra):
    #quitarle los espacios porque si se lee para la computadora no es lo mismo todos los caracteres los toma en cuenta
    #necesitamos eliminar los espacios basura
    palabra = palabra.replace(' ', '')# los espacios se cambian por nada
    palabra = palabra.lower()#minisculas por que L es diferente al carecter l para la computadora
    palabra_invertida = palabra[::-1] #generar un nuevo str que vaya del final al inicio de 1 en 1 y se guarda
    #preguntar si son iguales
    if palabra == palabra_invertida:
        return True
    else:
        return False



def main():
    palabra = input('Escribe una palabra: ')
    # Booleanos dependiendo T y F si es o no un palindromo
    es_palindromo = palindromo(palabra) # para la funcion de palindromo debe ubicarse arriba o antes de esta
    #Si es palaindromo es igual a T 
    if es_palindromo == True:
        print('Es palindromo')
    else:
        print('No es palindromo')
# dejar dos espacios es una buena practica y es obligatorio si nosotros seguimos los estilos

if __name__ == '__main__':
    main()


%%%
#Proyecto: palíndromo
def palindromo(palabra):
    palabra = palabra.replace(' ', '')
    palabra = palabra.lower()
    palabra_invertida = palabra[::-1]
    if palabra == palabra_invertida:
        return True
    else:
        return False


def main():
    palabra = input('Escribe una palabra: ')
    es_palindromo = palindromo(palabra)
    if es_palindromo == True:
        print('Es palindromo')
    else:
        print('No es palindromo')

if __name__ == '__main__':
    main()
%%%


C L A S E 21: 